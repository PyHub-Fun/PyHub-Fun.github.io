{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about/","text":"About PyHub.fun \u00b6 Have fun with Python!","title":"About"},{"location":"about/#about-pyhubfun","text":"Have fun with Python!","title":"About PyHub.fun"},{"location":"pyhub/image-steganography-20201114/","text":"\u9690\u5199\u672f\u662f\u4e00\u79cd\u5c06\u4fdd\u5bc6\u4fe1\u606f\u9690\u85cf\u5728\u516c\u5f00\u4fe1\u606f\u4e2d\u7684\u6280\u672f\uff0c\u5229\u7528\u56fe\u50cf\u6587\u4ef6\u7684\u7279\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e9b\u60f3\u8981\u523b\u610f\u9690\u85cf\u7684\u4fe1\u606f\u6216\u8005\u8bc1\u660e\u8eab\u4efd\u3001\u7248\u6743\u7684\u4fe1\u606f\u9690\u85cf\u5728\u56fe\u50cf\u6587\u4ef6\u4e2d\u3002\u6bd4\u5982\u65e9\u671f\u6d41\u884c\u7684\u5c06\u4e00\u4e9b\u4e0b\u8f7d\u94fe\u63a5\u3001\u79cd\u5b50\u6587\u4ef6\u9690\u85cf\u5728\u56fe\u7247\u6587\u4ef6\u4e2d\u8fdb\u884c\u4f20\u64ad\uff0c\u518d\u6bd4\u5982\u67d0\u4e92\u8054\u7f51\u516c\u53f8\u5185\u90e8\u8bba\u575b\u201c\u6708\u997c\u4e8b\u4ef6\u201d\u4e2d\u901a\u8fc7\u5458\u5de5\u622a\u56fe\u7cbe\u51c6\u5b9a\u4f4d\u4e2a\u4eba\u4fe1\u606f\u7684\u6280\u672f\uff0c\u90fd\u53ef\u4ee5\u5f52\u4e3a\u56fe\u50cf\u9690\u5199\u6280\u672f\uff08Image Steganography\uff09\u3002\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u89c1\u7684\u56fe\u50cf\u9690\u5199\u6280\u672f\u53ca Python \u5b9e\u73b0\u65b9\u6cd5\u3002 \u5143\u6570\u636e\u4fee\u6539 \u00b6 \u56fe\u50cf\u662f\u7531\u50cf\u7d20\u7ec4\u6210\u7684\uff0c\u4f46\u56fe\u50cf\u6587\u4ef6\u9664\u4e86\u4fdd\u5b58\u50cf\u7d20\u4fe1\u606f\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u5b58\u50a8\u4e00\u4e9b\u989d\u5916\u7684\u63cf\u8ff0\u4fe1\u606f\u3002\u4ee5\u5e38\u89c1\u7684 JPEG \u56fe\u50cf\u4e3a\u4f8b\uff0c\u6587\u4ef6\u683c\u5f0f\u89c4\u5b9a\u4e86\u4e00\u4e9b\u7279\u5b9a\u7684\u5b57\u7b26\u7528\u4ee5\u6807\u5fd7\u7279\u5b9a\u7684\u5143\u6570\u636e\u8d77\u70b9\u4f4d\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5176\u4e2d\u5e38\u7528\u4e8e\u5b58\u50a8\u62cd\u6444\u8bbe\u5907\u4fe1\u606f\u7684 EXIF \u6807\u8bb0\u5373\u5b58\u50a8\u5728 APPn \u6807\u8bb0\u4f4d\u3002\u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u8bfb\u53d6\u4e00\u5f20 JPEG \u56fe\u50cf\uff0c\u53ef\u4ee5\u770b\u5230\u6587\u4ef6\u7684\u8d77\u59cb\uff08SOI\uff09\u3001\u7ec8\u6b62\uff08EOI\uff09\u7b26\u53f7\uff1a with open ( \"input.jpg\" , \"rb\" ) as f : f_bytes = f . read () print ( f_bytes [: 2 ] ) print ( f_bytes [ - 2 :] ) # OUTPUT \"\"\" b'\\xff\\xd8' b'\\xff\\xd9' \"\"\" \u901a\u8fc7\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u56fe\u50cf\u6587\u4ef6\u540e\u9762\u8ffd\u52a0\u4fe1\u606f\uff1a txt = '\u4f60\u597d PyHub!' # \u7f16\u7801 with open ( \"out_append.jpg\" , \"wb\" ) as f : with open ( \"input.jpg\" , \"rb\" ) as ff : f . write ( f_bytes [ sos :]) f . write ( '\u4f60\u597d PyHub!' . encode ()) # \u89e3\u7801 with open ( \"out_append.jpg\" , \"rb\" ) as f : content = f . read () eoi = content . find ( b ' \\xff\\xd9 ' ) print ( content [ eoi + 2 :] . decode ()) # OUTPUT \"\"\" \u4f60\u597d PyHub! \"\"\" \u5143\u6570\u636e\u4fee\u6539\u7684\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u4e0d\u635f\u5931\u4efb\u4f55\u56fe\u50cf\u8d28\u91cf\uff0c\u4f46\u540c\u65f6\u4e5f\u6700\u5bb9\u6613\u88ab\u653b\u51fb\uff0c\u73b0\u5728\u5927\u90e8\u5206\u56fe\u50cf\u4e0a\u4f20\u5e94\u7528\u4f1a\u5bf9\u56fe\u50cf\u5185\u5bb9\u8fdb\u884c\u6e05\u6d17\uff0c\u53bb\u9664\u4e0d\u5fc5\u8981\u7684\u5143\u6570\u636e\u4ee5\u4fdd\u62a4\u7528\u6237\u9690\u79c1\u3002 \u6bd4\u7279\u64cd\u4f5c \u00b6 \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u5219\u662f\u9488\u5bf9\u5177\u4f53\u7684\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u4fee\u6539\uff0c\u5176\u539f\u7406\u5c31\u662f\u5229\u7528\u56fe\u50cf\u672c\u8eab\u4e30\u5bcc\u7684\u4fe1\u606f\u91cf\uff0c\u5728\u8fdb\u884c\u5c11\u91cf\u4fee\u6539\uff08\u7be1\u6539\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u4f1a\u5f71\u54cd\u6574\u4f53\u89c6\u89c9\u6548\u679c\u3002\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u662f**\u6700\u4f4e\u6709\u6548\u4f4d\uff08Least Significant Bit, LSB\uff09**\uff0c\u8fd9\u79cd\u65b9\u6cd5\u6709\u5f88\u591a\u53d8\u79cd\uff0c\u4f46\u5176\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u5229\u7528\u6700\u4f4e\u4f4d\u5bf9\u50cf\u7d20\u503c\u5f71\u54cd\u4e0d\u5927\uff0c\u7be1\u6539\u540e\u4e2d\u50cf\u7d20\u89c6\u89c9\u6548\u679c\u5f71\u54cd\u4e5f\u4e0d\u5927\u3002 \u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u5f20\u7b80\u5355\u7684\u6c34\u5370\u56fe\u7247\u8fdb\u884c\u4e8c\u503c\u5316\uff0c\u5f97\u5230\u4e00\u5f20\u53ea\u6709 0/1 \u8868\u793a\u7684\u56fe\u7247\uff1a from PIL import Image import numpy as np from matplotlib import pyplot as plt logo = Image . open ( \"logo.jpg\" ) . convert ( \"L\" ) logo_bin = np . where ( np . array ( logo ) > 128 , 1 , 0 ) . astype ( np . uint8 ) base = Image . open ( \"input.jpg\" ) # \u6700\u4f4e\u4f4d\u53d8\u4e3a 0 base_lsb = np . bitwise_and ( base , 0xFE ) # \u5c06 logo \u62fc\u63a5\u5230\u6700\u4f4e\u4f4d(\u5176\u4e2d\u4e00\u4e2a\u901a\u9053\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u75593\u4e2a\u901a\u9053) logo_h , logo_w = logo_bin . shape base_lsb [: logo_h , : logo_w , 0 ] += logo_bin # \u89e3\u7801 base_decode = np . bitwise_and ( base_lsb [:,:, 0 ], 1 ) \u4e0a\u9762\u7684\u4f8b\u5b50\u4ec5\u4ec5\u53ea\u662f\u5360\u7528\u4e86\u539f\u56fe\u5355\u901a\u9053\u6700\u4f4e\u4f4d 1bit \u7684\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u539f\u56fe\u548c\u9690\u85cf\u56fe\u7247\u5404\u5360\u4e00\u534a\uff0c\u539f\u7406\u662f\u4e00\u6837\u7684\u3002 \u53ef\u4ee5\u53c2\u8003\uff1a https://github.com/kelvins/steganography \u5bf9\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u6bd4\u7279\u64cd\u4f5c\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u6bd4\u5982\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u6700\u4f4e\u4f4d\u7684\u5947\u5076\u503c\uff0c\u76f4\u63a5\u5b58\u50a8\u4e8c\u8fdb\u5236\u7f16\u7801\uff08 https://www.geeksforgeeks.org/image-based-steganography-using-python/ \uff09\uff1b\u6216\u8005\u6309\u6bd4\u7279\u4f4d\u5bf9\u56fe\u50cf\u8fdb\u884c\u91cd\u65b0\u5206\u5272\uff0c\u7b49\u7b49\u3002 \u5f88\u663e\u7136\uff0c\u901a\u8fc7\u64cd\u4f5c\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u9690\u5199\u4f1a\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4fee\u6539\u56fe\u50cf\u7684\u89c6\u89c9\u8d28\u91cf\uff0c\u800c\u4e14\u5bf9\u4e8e\u5185\u5bb9\u672c\u8eab\u4e0d\u591f\u4e30\u5bcc\u7684\u56fe\u50cf\uff08\u4f8b\u5982\u5927\u9762\u79ef\u7eaf\u8272\u80cc\u666f\uff09\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5c31\u5f88\u5bb9\u6613\u9732\u51fa\u9a6c\u811a\u3002 \u9891\u57df\u6c34\u5370 \u00b6 \u9664\u4e86\u5bf9\u50cf\u7d20\uff08\u7a7a\u95f4\u57df\uff09\u8fdb\u884c\u64cd\u4f5c\u5916\uff0c\u8fd8\u53ef\u4ee5\u5728\u9891\u7387\u57df\u8fdb\u884c\u64cd\u4f5c\uff0c\u5176\u539f\u7406\u5c31\u662f\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362\u540e\uff0c\u5bf9\u9891\u7387\u57df\u7684\u6570\u636e\u52a0\u6c34\u5370\uff1a # \u539f\u56fe\uff0c1-1 base = Image . open ( \"input.jpg\" ) . convert ( \"L\" ) base_fft = np . fft . fft2 ( np . array ( base )) base_ffs = np . fft . fftshift ( base_fft ) # \u7ed8\u5236\u6c34\u5370 fnt = ImageFont . truetype ( \"Cyberway Riders.otf\" , 40 ) wm = Image . new ( \"L\" , base . size , ( 0 )) ImageDraw . Draw ( wm ) . text (( 0 , 0 ), \"PyHub\" , font = fnt , fill = ( 255 )) wm_arr = np . array ( wm ) # \u53cd\u8f6c\u751f\u6210\u4e2d\u5fc3\u5bf9\u79f0\uff0c\u56fe1-2 fft_wm_arr = ( np . flip ( wm_arr ) + wm_arr ) . astype ( np . uint8 ) # \u53e0\u52a0\u6c34\u5370\uff0c\u56fe1-3 base_ffs . real [ fft_wm_arr == 255 ] = 255 # \u5085\u91cc\u53f6\u9006\u53d8\u6362\uff0c\u56fe2-1 base_reversed = np . real ( np . fft . ifft2 ( np . fft . ifftshift ( base_ffs ) ) ) # \u5bf9\u9006\u53d8\u6362\uff08\u7f16\u7801\uff09\u540e\u7684\u56fe\u8fdb\u884c\u89e3\u7801\uff0c\u56fe2-2 base_decode = np . clip ( np . fft . fftshift ( np . fft . fft2 ( base_reversed )) . real , 0 , 255 ) # \u7f16\u7801\u540e\u7684\u56fe\u4e0e\u539f\u56fe\u7684\u5dee\u5f02\uff0c\u56fe2-2 base_reversed - np . array ( base ) \u4ee5\u4e0a\u7684\u65b9\u6cd5\u6bd4\u8f83\u7b80\u5355\u7c97\u66b4\uff0c\u76f4\u63a5\u5bf9\u9891\u57df\u7684\u7279\u5b9a\u533a\u57df\u53e0\u52a0\u4e86\u6c34\u5370\uff0c\u5b9e\u9645\u6548\u679c\u53ef\u80fd\u4f1a\u5bf9\u539f\u59cb\u56fe\u7247\u9020\u6210\u8f83\u5927\u635f\u5bb3\uff0c\u66f4\u51c6\u786e\u7684\u65b9\u6cd5\u5e94\u8be5\u662f\u5bf9\u6c34\u5370\u56fe\u7247\u8fdb\u884c\u7f16\u7801\uff0c\u8ba9\u6c34\u5370\u56fe\u50cf\u5747\u5300\u5730\u5206\u5e03\u5728\u5404\u4e2a\u9891\u7387\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\uff1a https://github.com/guofei9987/blind_watermark/ \u3002\u5bf9\u9891\u57df\u8fdb\u884c\u4fee\u6539\u7684\u65b9\u6cd5\u5bf9\u56fe\u50cf\u89c6\u89c9\u6548\u679c\u5f71\u54cd\u66f4\u5c0f\uff0c\u5728\u9762\u5bf9\u5404\u79cd\u56fe\u50cf\u6539\u5199\u653b\u51fb\u65f6\u7684\u8fd8\u539f\u6548\u679c\u66f4\u597d\u3002 \u6df1\u5ea6\u5b66\u4e60 \u00b6 \u4e00\u5207\u7686\u53ef\u6df1\u5ea6\u5b66\u4e60\u3002 \u901a\u8fc7 PapersWithCode \u7f51\u7ad9\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u5c1d\u8bd5\u7528\u6df1\u5ea6\u5b66\u4e60\u7684\u65b9\u6cd5\u8fdb\u884c\u56fe\u50cf\u9690\u5199\u7684\u7814\u7a76\uff0c\u4f8b\u5982\u8fd9\u7bc7\u91c7\u7528\u5bf9\u6297\u751f\u6210\u7f51\u7edc\uff08GAN\uff09\u6a21\u578b\uff0c\u5c06\u6570\u636e Data \u7f16\u7801\u5230 Image \u4e2d\uff1a \u53ef\u4ee5\u901a\u8fc7 pip install steganogan \u5b89\u88c5\u4f5c\u8005\u9884\u8bad\u7ec3\u7684\u6a21\u578b\uff1a steganogan encode input.jpg \"Hi PyHub\" -o out_gan.jpg \u6548\u679c\u5982\u4e0b\uff1a","title":"\u56fe\u50cf\u9690\u5199\u672f"},{"location":"pyhub/image-steganography-20201114/#_1","text":"\u56fe\u50cf\u662f\u7531\u50cf\u7d20\u7ec4\u6210\u7684\uff0c\u4f46\u56fe\u50cf\u6587\u4ef6\u9664\u4e86\u4fdd\u5b58\u50cf\u7d20\u4fe1\u606f\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u5b58\u50a8\u4e00\u4e9b\u989d\u5916\u7684\u63cf\u8ff0\u4fe1\u606f\u3002\u4ee5\u5e38\u89c1\u7684 JPEG \u56fe\u50cf\u4e3a\u4f8b\uff0c\u6587\u4ef6\u683c\u5f0f\u89c4\u5b9a\u4e86\u4e00\u4e9b\u7279\u5b9a\u7684\u5b57\u7b26\u7528\u4ee5\u6807\u5fd7\u7279\u5b9a\u7684\u5143\u6570\u636e\u8d77\u70b9\u4f4d\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5176\u4e2d\u5e38\u7528\u4e8e\u5b58\u50a8\u62cd\u6444\u8bbe\u5907\u4fe1\u606f\u7684 EXIF \u6807\u8bb0\u5373\u5b58\u50a8\u5728 APPn \u6807\u8bb0\u4f4d\u3002\u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u8bfb\u53d6\u4e00\u5f20 JPEG \u56fe\u50cf\uff0c\u53ef\u4ee5\u770b\u5230\u6587\u4ef6\u7684\u8d77\u59cb\uff08SOI\uff09\u3001\u7ec8\u6b62\uff08EOI\uff09\u7b26\u53f7\uff1a with open ( \"input.jpg\" , \"rb\" ) as f : f_bytes = f . read () print ( f_bytes [: 2 ] ) print ( f_bytes [ - 2 :] ) # OUTPUT \"\"\" b'\\xff\\xd8' b'\\xff\\xd9' \"\"\" \u901a\u8fc7\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u56fe\u50cf\u6587\u4ef6\u540e\u9762\u8ffd\u52a0\u4fe1\u606f\uff1a txt = '\u4f60\u597d PyHub!' # \u7f16\u7801 with open ( \"out_append.jpg\" , \"wb\" ) as f : with open ( \"input.jpg\" , \"rb\" ) as ff : f . write ( f_bytes [ sos :]) f . write ( '\u4f60\u597d PyHub!' . encode ()) # \u89e3\u7801 with open ( \"out_append.jpg\" , \"rb\" ) as f : content = f . read () eoi = content . find ( b ' \\xff\\xd9 ' ) print ( content [ eoi + 2 :] . decode ()) # OUTPUT \"\"\" \u4f60\u597d PyHub! \"\"\" \u5143\u6570\u636e\u4fee\u6539\u7684\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u4e0d\u635f\u5931\u4efb\u4f55\u56fe\u50cf\u8d28\u91cf\uff0c\u4f46\u540c\u65f6\u4e5f\u6700\u5bb9\u6613\u88ab\u653b\u51fb\uff0c\u73b0\u5728\u5927\u90e8\u5206\u56fe\u50cf\u4e0a\u4f20\u5e94\u7528\u4f1a\u5bf9\u56fe\u50cf\u5185\u5bb9\u8fdb\u884c\u6e05\u6d17\uff0c\u53bb\u9664\u4e0d\u5fc5\u8981\u7684\u5143\u6570\u636e\u4ee5\u4fdd\u62a4\u7528\u6237\u9690\u79c1\u3002","title":"\u5143\u6570\u636e\u4fee\u6539"},{"location":"pyhub/image-steganography-20201114/#_2","text":"\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u5219\u662f\u9488\u5bf9\u5177\u4f53\u7684\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u4fee\u6539\uff0c\u5176\u539f\u7406\u5c31\u662f\u5229\u7528\u56fe\u50cf\u672c\u8eab\u4e30\u5bcc\u7684\u4fe1\u606f\u91cf\uff0c\u5728\u8fdb\u884c\u5c11\u91cf\u4fee\u6539\uff08\u7be1\u6539\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u4f1a\u5f71\u54cd\u6574\u4f53\u89c6\u89c9\u6548\u679c\u3002\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u662f**\u6700\u4f4e\u6709\u6548\u4f4d\uff08Least Significant Bit, LSB\uff09**\uff0c\u8fd9\u79cd\u65b9\u6cd5\u6709\u5f88\u591a\u53d8\u79cd\uff0c\u4f46\u5176\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u5229\u7528\u6700\u4f4e\u4f4d\u5bf9\u50cf\u7d20\u503c\u5f71\u54cd\u4e0d\u5927\uff0c\u7be1\u6539\u540e\u4e2d\u50cf\u7d20\u89c6\u89c9\u6548\u679c\u5f71\u54cd\u4e5f\u4e0d\u5927\u3002 \u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u5f20\u7b80\u5355\u7684\u6c34\u5370\u56fe\u7247\u8fdb\u884c\u4e8c\u503c\u5316\uff0c\u5f97\u5230\u4e00\u5f20\u53ea\u6709 0/1 \u8868\u793a\u7684\u56fe\u7247\uff1a from PIL import Image import numpy as np from matplotlib import pyplot as plt logo = Image . open ( \"logo.jpg\" ) . convert ( \"L\" ) logo_bin = np . where ( np . array ( logo ) > 128 , 1 , 0 ) . astype ( np . uint8 ) base = Image . open ( \"input.jpg\" ) # \u6700\u4f4e\u4f4d\u53d8\u4e3a 0 base_lsb = np . bitwise_and ( base , 0xFE ) # \u5c06 logo \u62fc\u63a5\u5230\u6700\u4f4e\u4f4d(\u5176\u4e2d\u4e00\u4e2a\u901a\u9053\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u75593\u4e2a\u901a\u9053) logo_h , logo_w = logo_bin . shape base_lsb [: logo_h , : logo_w , 0 ] += logo_bin # \u89e3\u7801 base_decode = np . bitwise_and ( base_lsb [:,:, 0 ], 1 ) \u4e0a\u9762\u7684\u4f8b\u5b50\u4ec5\u4ec5\u53ea\u662f\u5360\u7528\u4e86\u539f\u56fe\u5355\u901a\u9053\u6700\u4f4e\u4f4d 1bit \u7684\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u539f\u56fe\u548c\u9690\u85cf\u56fe\u7247\u5404\u5360\u4e00\u534a\uff0c\u539f\u7406\u662f\u4e00\u6837\u7684\u3002 \u53ef\u4ee5\u53c2\u8003\uff1a https://github.com/kelvins/steganography \u5bf9\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u6bd4\u7279\u64cd\u4f5c\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u6bd4\u5982\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u6700\u4f4e\u4f4d\u7684\u5947\u5076\u503c\uff0c\u76f4\u63a5\u5b58\u50a8\u4e8c\u8fdb\u5236\u7f16\u7801\uff08 https://www.geeksforgeeks.org/image-based-steganography-using-python/ \uff09\uff1b\u6216\u8005\u6309\u6bd4\u7279\u4f4d\u5bf9\u56fe\u50cf\u8fdb\u884c\u91cd\u65b0\u5206\u5272\uff0c\u7b49\u7b49\u3002 \u5f88\u663e\u7136\uff0c\u901a\u8fc7\u64cd\u4f5c\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u9690\u5199\u4f1a\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4fee\u6539\u56fe\u50cf\u7684\u89c6\u89c9\u8d28\u91cf\uff0c\u800c\u4e14\u5bf9\u4e8e\u5185\u5bb9\u672c\u8eab\u4e0d\u591f\u4e30\u5bcc\u7684\u56fe\u50cf\uff08\u4f8b\u5982\u5927\u9762\u79ef\u7eaf\u8272\u80cc\u666f\uff09\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5c31\u5f88\u5bb9\u6613\u9732\u51fa\u9a6c\u811a\u3002","title":"\u6bd4\u7279\u64cd\u4f5c"},{"location":"pyhub/image-steganography-20201114/#_3","text":"\u9664\u4e86\u5bf9\u50cf\u7d20\uff08\u7a7a\u95f4\u57df\uff09\u8fdb\u884c\u64cd\u4f5c\u5916\uff0c\u8fd8\u53ef\u4ee5\u5728\u9891\u7387\u57df\u8fdb\u884c\u64cd\u4f5c\uff0c\u5176\u539f\u7406\u5c31\u662f\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362\u540e\uff0c\u5bf9\u9891\u7387\u57df\u7684\u6570\u636e\u52a0\u6c34\u5370\uff1a # \u539f\u56fe\uff0c1-1 base = Image . open ( \"input.jpg\" ) . convert ( \"L\" ) base_fft = np . fft . fft2 ( np . array ( base )) base_ffs = np . fft . fftshift ( base_fft ) # \u7ed8\u5236\u6c34\u5370 fnt = ImageFont . truetype ( \"Cyberway Riders.otf\" , 40 ) wm = Image . new ( \"L\" , base . size , ( 0 )) ImageDraw . Draw ( wm ) . text (( 0 , 0 ), \"PyHub\" , font = fnt , fill = ( 255 )) wm_arr = np . array ( wm ) # \u53cd\u8f6c\u751f\u6210\u4e2d\u5fc3\u5bf9\u79f0\uff0c\u56fe1-2 fft_wm_arr = ( np . flip ( wm_arr ) + wm_arr ) . astype ( np . uint8 ) # \u53e0\u52a0\u6c34\u5370\uff0c\u56fe1-3 base_ffs . real [ fft_wm_arr == 255 ] = 255 # \u5085\u91cc\u53f6\u9006\u53d8\u6362\uff0c\u56fe2-1 base_reversed = np . real ( np . fft . ifft2 ( np . fft . ifftshift ( base_ffs ) ) ) # \u5bf9\u9006\u53d8\u6362\uff08\u7f16\u7801\uff09\u540e\u7684\u56fe\u8fdb\u884c\u89e3\u7801\uff0c\u56fe2-2 base_decode = np . clip ( np . fft . fftshift ( np . fft . fft2 ( base_reversed )) . real , 0 , 255 ) # \u7f16\u7801\u540e\u7684\u56fe\u4e0e\u539f\u56fe\u7684\u5dee\u5f02\uff0c\u56fe2-2 base_reversed - np . array ( base ) \u4ee5\u4e0a\u7684\u65b9\u6cd5\u6bd4\u8f83\u7b80\u5355\u7c97\u66b4\uff0c\u76f4\u63a5\u5bf9\u9891\u57df\u7684\u7279\u5b9a\u533a\u57df\u53e0\u52a0\u4e86\u6c34\u5370\uff0c\u5b9e\u9645\u6548\u679c\u53ef\u80fd\u4f1a\u5bf9\u539f\u59cb\u56fe\u7247\u9020\u6210\u8f83\u5927\u635f\u5bb3\uff0c\u66f4\u51c6\u786e\u7684\u65b9\u6cd5\u5e94\u8be5\u662f\u5bf9\u6c34\u5370\u56fe\u7247\u8fdb\u884c\u7f16\u7801\uff0c\u8ba9\u6c34\u5370\u56fe\u50cf\u5747\u5300\u5730\u5206\u5e03\u5728\u5404\u4e2a\u9891\u7387\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\uff1a https://github.com/guofei9987/blind_watermark/ \u3002\u5bf9\u9891\u57df\u8fdb\u884c\u4fee\u6539\u7684\u65b9\u6cd5\u5bf9\u56fe\u50cf\u89c6\u89c9\u6548\u679c\u5f71\u54cd\u66f4\u5c0f\uff0c\u5728\u9762\u5bf9\u5404\u79cd\u56fe\u50cf\u6539\u5199\u653b\u51fb\u65f6\u7684\u8fd8\u539f\u6548\u679c\u66f4\u597d\u3002","title":"\u9891\u57df\u6c34\u5370"},{"location":"pyhub/image-steganography-20201114/#_4","text":"\u4e00\u5207\u7686\u53ef\u6df1\u5ea6\u5b66\u4e60\u3002 \u901a\u8fc7 PapersWithCode \u7f51\u7ad9\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u5c1d\u8bd5\u7528\u6df1\u5ea6\u5b66\u4e60\u7684\u65b9\u6cd5\u8fdb\u884c\u56fe\u50cf\u9690\u5199\u7684\u7814\u7a76\uff0c\u4f8b\u5982\u8fd9\u7bc7\u91c7\u7528\u5bf9\u6297\u751f\u6210\u7f51\u7edc\uff08GAN\uff09\u6a21\u578b\uff0c\u5c06\u6570\u636e Data \u7f16\u7801\u5230 Image \u4e2d\uff1a \u53ef\u4ee5\u901a\u8fc7 pip install steganogan \u5b89\u88c5\u4f5c\u8005\u9884\u8bad\u7ec3\u7684\u6a21\u578b\uff1a steganogan encode input.jpg \"Hi PyHub\" -o out_gan.jpg \u6548\u679c\u5982\u4e0b\uff1a","title":"\u6df1\u5ea6\u5b66\u4e60"}]}